<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C) 2013 Inera AB (http://www.inera.se) This file is part 
  of Inera Certificate Web (http://code.google.com/p/inera-certificate-web). 
  Inera Certificate Web is free software: you can redistribute it and/or modify 
  it under the terms of the GNU Affero General Public License as published 
  by the Free Software Foundation, either version 3 of the License, or (at 
  your option) any later version. Inera Certificate Web is distributed in the 
  hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  GNU Affero General Public License for more details. You should have received 
  a copy of the GNU Affero General Public License along with this program. 
  If not, see <http://www.gnu.org/licenses/>. -->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:http="http://cxf.apache.org/transports/http/configuration"
  xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:task="http://www.springframework.org/schema/task"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
        http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
        http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

  <beans profile="qa,prod">
    <!-- Config file must be present in qa and prod -->
    <context:property-placeholder
      location="file:${credentials.file}, file:${webcert.config.file}"
      order="1" ignore-resource-not-found="false" ignore-unresolvable="true" />
  </beans>
  <beans profile="dev,test,local">
    <!-- Config file could be missing in dev and test -->
    <context:property-placeholder
      location="file:${credentials.file}, file:${webcert.config.file}"
      order="1" ignore-resource-not-found="true" ignore-unresolvable="true" />
  </beans>

  <beans>
    <context:property-placeholder
      location="classpath:default.properties, classpath:default.${spring.profiles.active}.properties, classpath:version.properties"
      order="2" ignore-resource-not-found="true" />

    <context:annotation-config />
    <context:component-scan base-package="se.inera.webcert" />
    <task:annotation-driven scheduler="scheduler"
      executor="threadPoolTaskExecutor" />
    <task:scheduler id="scheduler" pool-size="1" />
    <task:executor id="threadPoolTaskExecutor" pool-size="10"
      queue-capacity="100" rejection-policy="CALLER_RUNS" />

    <import resource="classpath:repository-context.xml" />
    <import resource="security/securityContext.xml" />
    <import resource="classpath:/hsa-services-config.xml" />
    <import resource="classpath:/signature-services-config.xml" />
    <import resource="classpath:/pu-services-config.xml" />

    <import resource="classpath:jms-config.xml" />

    <import resource="classpath:/mail-stub-context.xml" />

    <import resource="classpath*:module-config.xml" />


    <context:component-scan base-package="se.inera.webcert.web.service" />
    <bean id="messageSource"
      class="org.springframework.context.support.ResourceBundleMessageSource">
      <property name="defaultEncoding" value="UTF-8" />
      <property name="basenames">
        <list>
          <value>ui</value>
          <value>version</value>
        </list>
      </property>
    </bean>
    <bean
      class="org.springframework.web.context.support.ServletContextAttributeExporter">
      <property name="attributes">
        <map>
          <entry key="healthcheck" value-ref="healthcheck" />
        </map>
      </property>
    </bean>
    <bean id="healthcheck" class="se.inera.webcert.overvakning.HealthCheck" />

    <!-- Mail configuration -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="${mail.host}" />
      <property name="protocol" value="${mail.protocol}" />
      <property name="username" value="${mail.username}" />
      <property name="password" value="${mail.password}" />
      <property name="defaultEncoding" value="${mail.defaultEncoding}" />
      <property name="javaMailProperties">
        <props>
          <prop key="mail.smtps.auth">${mail.smtps.auth}</prop>
          <prop key="mail.smtps.starttls.enable">${mail.smtps.starttls.enable}</prop>
          <prop key="mail.smtps.debug">${mail.smtps.debug}</prop>
        </props>
      </property>
    </bean>

    <bean id="objectMapper"
      class="se.inera.certificate.integration.json.CustomObjectMapper" />

    <bean id="jacksonJsonProvider"
      class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider">
      <property name="mapper">
        <bean class="se.inera.certificate.integration.json.CustomObjectMapper" />
      </property>
    </bean>

    <jaxws:endpoint address="/ping-for-configuration/v1.0"
      implementor="se.inera.webcert.integration.PingForConfigurationResponderImpl" />

    <!-- Handlers for REST services -->
    <bean id="webcertRestExceptionHandler"
      class="se.inera.webcert.web.handlers.WebcertRestExceptionHandler" />

    <bean id="localDateTimeHandler" class="se.inera.webcert.web.handlers.LocalDateTimeHandler" />

    <!-- ws clients -->
    <jaxws:client id="getCertificateForCareResponder"
      serviceClass="se.inera.certificate.clinicalprocess.healthcond.certificate.getcertificateforcare.v1.GetCertificateForCareResponderInterface"
      address="${intygstjanst.getcertificateforcare.endpoint.url}">
    </jaxws:client>
    
    <jaxws:client id="listCertificatesForCareResponder"
      serviceClass="se.inera.certificate.clinicalprocess.healthcond.certificate.listcertificatesforcare.v1.ListCertificatesForCareResponderInterface"
      address="${intygstjanst.listcertificatesforcare.endpoint.url}">
    </jaxws:client>
    
    <jaxws:client id="sendQuestionToFKClient"
      serviceClass="se.inera.webcert.sendmedicalcertificatequestion.v1.rivtabp20.SendMedicalCertificateQuestionResponderInterface"
      address="${sendquestiontofk.endpoint.url}">
    </jaxws:client>
    
    <jaxws:client id="sendAnswerToFKClient"
      serviceClass="se.inera.webcert.sendmedicalcertificateanswer.v1.rivtabp20.SendMedicalCertificateAnswerResponderInterface"
      address="${sendanswertofk.endpoint.url}">
    </jaxws:client>
    
    <jaxws:client id="registerCertificate"
      serviceClass="se.inera.certificate.clinicalprocess.healthcond.certificate.registerCertificate.v1.RegisterCertificateResponderInterface"
      address="${intygstjanst.registercertificate.endpoint.url}">
    </jaxws:client>
    
    <jaxws:client id="sendCertificateClient"
      serviceClass="se.inera.ifv.insuranceprocess.healthreporting.sendmedicalcertificate.v1.rivtabp20.SendMedicalCertificateResponderInterface"
      address="${intygstjanst.sendcertificate.endpoint.url}" />
    
    <jaxws:client id="revokeCertificateClient"
      serviceClass="se.inera.ifv.insuranceprocess.healthreporting.revokemedicalcertificate.v1.rivtabp20.RevokeMedicalCertificateResponderInterface"
      address="${intygstjanst.revokecertificate.endpoint.url}" />
    
    <jaxws:client id="getRecipientsForCertificateResponder"
      serviceClass="se.inera.certificate.clinicalprocess.healthcond.certificate.getrecipientsforcertificate.v1.GetRecipientsForCertificateResponderInterface"
      address="${intygstjanst.getrecipientsforcertificate.endpoint.url}" />
  </beans>

  <!-- In dev and demo mode we bootstrap data -->
  <beans profile="dev,demo">
    <bean id="FragaSvarBootstrapBean" class="se.inera.webcert.service.util.FragaSvarBootstrapBean" />
  </beans>

  <beans profile="test,qa,prod">
    <http:conduit
      name="{urn:riv:clinicalprocess:healthcond:certificate:GetCertificateForCare:1:rivtabp21}GetCertificateForCareResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
        Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">

        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
            password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
            password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}" />
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable 
            or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
    <http:conduit
      name="{urn:riv:clinicalprocess:healthcond:certificate:ListCertificatesForCare:1:rivtabp21}ListCertificatesForCareResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
        Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">

        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
            password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
            password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}" />
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable 
            or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
    <http:conduit
      name="{urn:riv:population:residentmaster:LookupResidentForFullProfile:1:rivtabp21}LookupResidentForFullProfileResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
        Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
            password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
            password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}" />
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable 
            or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
  </beans>

  <beans profile="qa,prod">
    <http:conduit
      name="{urn:riv:insuranceprocess:healthreporting:SendMedicalCertificateQuestion:1:rivtabp20}SendMedicalCertificateQuestionResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
        Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
            password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
            password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}" />
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable 
            or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
    <http:conduit
      name="{urn:riv:insuranceprocess:healthreporting:SendMedicalCertificateAnswer:1:rivtabp20}SendMedicalCertificateAnswerResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
        Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
            password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
            password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}" />
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable 
            or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
    <http:conduit
      name="{urn:riv:population:residentmaster:LookupResidentForFullProfile:1:rivtabp21}LookupResidentForFullProfileResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
        Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
            password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
            password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}" />
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable 
            or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
  </beans>

</beans>
