pipeline {

  options {
    timestamps () // Kräver plugin "Timestamper"
  }

  environment {
    HOME = "${env.WORKSPACE}" // Måste sättas för "npm ci"

    CYPRESS_DIR_REL="test/cypress"
    RESULTAT_DIR_REL="${CYPRESS_DIR_REL}/results"
    RESULTAT_DIR_ABS="${env.WORKSPACE}/${RESULTAT_DIR_REL}"

    RESURSRAPPORTSKRIPTNAMN = "write_resource_stats.sh"
    RESURSSKRIPT_ABS="${env.WORKSPACE}/${CYPRESS_DIR_REL}/${RESURSRAPPORTSKRIPTNAMN}"

    RESURSRAPPORTERINGSFIL_REL="${RESULTAT_DIR_REL}/resursrapporteringsfil.txt"
    RESURSRAPPORTERINGSFIL_ABS="${env.WORKSPACE}/${RESURSRAPPORTERINGSFIL_REL}"

    RESURSINTERVALL=30
    TESTRAPPORTFILPATTERN = "*.xml"

    // Nycklarna till dashboard hanteras här: https://dashboard.cypress.io/#/projects/1diiry/settings
    CYPRESS_RECORD_KEY=credentials('CYPRESS_DASHBOARD_NMT_WEBCERT_KEY_1')
  }

  agent {
    // this image provides everything needed to run Cypress
    docker {
      // image 'cypress/browsers:chrome69'  // Cypress kan inte spela in videos om man nyttjar Chrome
      image 'cypress/base:10'
      label 'docker-slave'
    }
  }

  stages {

    stage('Verifiera förkrav') {
      steps {
        echo "Running build ${env.BUILD_ID} on ${env.JENKINS_URL}"
        sh 'npm --version'
        sh 'node --version'
      }
    }

    stage('Rensa gamla filer') {
      steps {
        // Testrapporter
        sh "rm -fr '${RESULTAT_DIR_ABS}/${TESTRAPPORTFILPATTERN}'"

        // Loggfiler från tidigare körningar
        sh "rm -fr '${env.WORKSPACE}/.npm/_logs/*.log'"

        // Resursrapporteringfil
        sh "rm -fr '${RESURSRAPPORTERINGSFIL_ABS}'"
      }
    }

    stage('Installera Cypress') {
      steps {
        sh 'npm ci'
        sh 'npm run cy:verify'
      }
    }

    stage('Exekvera Cypresstester') {
      parallel {
        stage('Starta resursövervakning') {
          steps {
            // Skapa upp resultatkatalogen ifall den inte redan finns
            sh "mkdir -p ${RESULTAT_DIR_ABS}/"
            sh "${RESURSSKRIPT_ABS} ${RESURSINTERVALL} ${RESURSRAPPORTERINGSFIL_ABS}"
          }
        }

        stage('Starta testerna') {
          steps {
            sh "npm run test:e2e:electron:record"

            // Terminera skriptet som skriver ner resursanvändning på slaven
            // pkill returnerar antal processer som matchades (d.v.s != 0), därför används vanliga kill istället
            sh '''#! /bin/bash
                SKRIPT_PID=$(ps -elf | grep ${RESURSRAPPORTSKRIPTNAMN} | grep -v 'grep ' | tr -s ' ' | cut -d ' ' -f 4)
                echo "Hittade resursrapportskriptets PID ${SKRIPT_PID} som ska stoppas."
                kill ${SKRIPT_PID}
            '''
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'test/cypress/videos/**/*.*', fingerprint: false
      archiveArtifacts artifacts: "${RESURSRAPPORTERINGSFIL_REL}", fingerprint: false
      // TODO: Använd variabler för att hämta JUnit-filer istället för hårdkodade pather
      junit 'test/cypress/results/*.xml'
    }

    fixed {
      // Skicka epost om jobbet går bra igen
      emailext (
        subject: "Fixat! Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: "Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]' går nu BRA igen. Se konsollutmatning här: '${env.BUILD_URL}'",
        to: "johannes.larsson@nordicmedtest.se"
      )
    }

    failure {
      archiveArtifacts artifacts: 'test/cypress/screenshots/**/*.*', fingerprint: false
      archiveArtifacts artifacts: '.npm/_logs/*.log', fingerprint: false

      // TODO: cypress-failed-log skriver i dagsläget till <repo>/cypress oavsett hur man konfigurerar
      // Cypress. Endera låter vi det vara så (katalogen skapas endast när testfall går fel) eller så
      // tas cypress-failed-log bort. Det tredje alternativet är att se om en nyare version inför
      // konfiguration av sökväg.
      archiveArtifacts artifacts: 'cypress/logs/**/*.json', fingerprint: false
    }

    // Denna sektion exekveras enbart om föregående körning gick bra och denna misslyckades
    regression {
      // Skicka epost om jobbet misslyckas
      emailext (
        subject: "Misslyckat! Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: "Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]' MISSLYCKADES! Se konsollutmatning här: '${env.BUILD_URL}'. Inga fler mail kommer skickas innan jobbet åter går bra.",
        to: "johannes.larsson@nordicmedtest.se"
      )
    }
  }
}
