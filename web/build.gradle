description = 'Webcert (Web)'

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.moowork.node'

def webappOutputDir = 'build/apps/';
def webappTestOutputDir = 'build/karma/';

grunt {
  colors = true
}

node {
  version = '0.12.4'
  download = true
  distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
}

// TODO: these still show up in the built war file.
sourceSets {
  main {
    resources {
      exclude '**/*.scss'
      exclude '**/*.spec.js'
      exclude '**/*.test.js'
    }
  }
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
  inputs.dir("$projectDir/src/main/resources")
  inputs.dir("$projectDir/src/main/webapp")
  inputs.files(fileTree(projectDir).include('*.js'))
  inputs.files(fileTree(projectDir).include('*.json'))
  inputs.files(configurations.compile)
  outputs.dir(webappTestOutputDir)

  script = file('node_modules/grunt-cli/bin/grunt')
  args = ['test', '--outputDir=' + webappTestOutputDir, '--skip-coverage='+(!project.hasProperty('runSonar'))]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
  inputs.dir("$projectDir/src/main/resources")
  inputs.dir("$projectDir/src/main/webapp")
  inputs.files(fileTree(projectDir).include('*.js'))
  inputs.files(fileTree(projectDir).include('*.json'))
  inputs.files(configurations.compile)
  outputs.dir(webappOutputDir)

  script = file('node_modules/grunt-cli/bin/grunt')
  args = ['default', '--outputDir=' + webappOutputDir]
}

war.dependsOn(jsInclude)

war {
  from( "${buildDir}/apps" )
}

test {
  exclude '**/*IT*'
}

gretty {
  if (project.hasProperty('jenkins-build')) {
    integrationTestTask = null
  }
  contextPath = '/'
  httpPort = 9088
  scanInterval = 0

  contextConfigFile = file("src/main/webapp/WEB-INF/jetty-web.xml")

  def useMinifiedJavaScript = false;
  if (System.properties['webcert.useMinifiedJavaScript'] != null) {
    useMinifiedJavaScript = System.properties['webcert.useMinifiedJavaScript'];
  }

  jvmArgs = [
    "-Dcatalina.base=${buildDir}/catalina.base",
    "-Dspring.profiles.active=dev",
    "-Dwebcert.resources.folder=${projectDir}/../src/main/resources",
    "-Dcredentials.file=${projectDir}/webcert-credentials.properties",
    "-Dwebcert.config.file=${projectDir}/webcert-dev.properties",
    "-Dwebcert.logback.file=${projectDir}/webcert-logback.xml",
    "-Dwebcert.useMinifiedJavaScript=" + useMinifiedJavaScript,
    "-Dh2.tcp.port=9094",
    "-Dh2.web.port=9090",
    "-Djetty.port=9088"
  ]

  extraResourceBase webappOutputDir

  // TODO: use?
  //   debugSuspend = false
  //   recompileOnSourceChange = false
  //   reloadOnClassChange = false
  //   reloadOnConfigChange = false
  //   reloadOnLibChange = false
}

// TODO: make run of integration tests configurable
task integrationTest(type: Test) {
  if (project.hasProperty('jenkins-build')) {
    systemProperty "integration.tests.baseUrl", project.getProperty('baseUri')
  } else {
    systemProperty "integration.tests.baseUrl", "http://localhost:9088/"
  }
  include '**/*IT*'
}

war.dependsOn createVersionPropertyFile

// TODO: This is required to make the Schematron implementation pick up Saxon instead of Xalan.
// See if there is a less drastic solution.
configurations {
  runtime {
    exclude group: 'xalan', module: 'xalan'
  }
  buildtools
}

buildscript {
  dependencies {
    classpath 'org.akhikhl.gretty:gretty:+'
    classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
    classpath 'com.moowork.gradle:gradle-grunt-plugin:0.12'
  }
}

dependencies {
  buildtools "se.inera.intyg.common:common-build-tools:${commonVersion}"

  compile project(':fmb-integration')
  compile project(':pu-integration')
  compile project(':pp-integration')
  compile project(':notification-sender')
  compile project(':fk-stub')
  compile project(':notification-stub')
  compile project(':intygstjanst-stub')
  compile project(':mail-stub')

  compile "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
  compile 'se.funktionstjanster.grp:funktionstjanster-grp-schemas:1.0.2'

  compile "se.inera.intyg.common:loggtjanst-stub:${commonVersion}"
  compile "se.inera.intyg.common:security-siths:${commonVersion}"

  compile "se.inera.intyg.intygstyper:ts-bas:${typerVersion}"
  compile "se.inera.intyg.intygstyper:ts-diabetes:${typerVersion}"
  compile "se.inera.intyg.intygstyper:fk-parent:${typerVersion}"
  compile "se.inera.intyg.intygstyper:luse:${typerVersion}"
  compile "se.inera.intyg.intygstyper:lisu:${typerVersion}"
  compile "se.inera.intyg.intygstyper:luae_na:${typerVersion}"
  compile "se.inera.intyg.intygstyper:luae_fs:${typerVersion}"
  compile (group: "se.inera.intyg.intygstyper", name:"fk7263", version: "${typerVersion}") {
    exclude(module: "insuranceprocess-healthreporting-schemas")
    exclude(module: "fk-vardgivare-sjukvard-schemas")
    exclude(module: "ServiceContracts_itintegration_monitoring")
  }

  compile "org.springframework:spring-web:${springVersion}"
  compile "org.springframework:spring-webmvc:${springVersion}"
  compile "org.apache.lucene:lucene-analyzers-common:4.10.2"

  compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
  compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
  compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
  compile 'org.springframework.security.extensions:spring-security-saml2-core:1.0.1.RELEASE'

  compile(group: 'org.opensaml', name: 'opensaml', version:'2.5.3') {
    exclude(module: 'openws')
  }
  compile(group: 'org.opensaml', name: 'openws', version:'1.4.2-1') {
    exclude(module: 'xmltooling')
  }
  compile(group: 'org.opensaml', name: 'xmltooling', version:'1.3.2') {
    exclude(module: 'xml-apis')
  }
  compile(group: 'io.swagger', name: 'swagger-jaxrs', version:'1.5.4') {
    exclude(module: 'jsr311-api')
  }

  testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
  testCompile "org.springframework:spring-test:${springVersion}"
  testCompile 'javax.servlet:javax.servlet-api:3.1.0'
  testCompile 'org.kubek2k:springockito:1.0.8'
  testCompile 'xmlunit:xmlunit:1.4'
  testCompile 'com.jayway.restassured:rest-assured:2.8.0'
  testCompile 'com.jayway.restassured:json-schema-validator:2.8.0'
  testCompile 'org.antlr:ST4:4.0.8'

  testRuntime 'com.h2database:h2:1.3.174'

  providedCompile 'javax.servlet:servlet-api:2.5'
  providedCompile 'com.google.auto.value:auto-value:1.1'
  providedCompile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

  gretty 'org.apache.activemq:activemq-client:5.13.0'
  gretty 'org.apache.activemq:activemq-broker:5.13.0'
  gretty "com.h2database:h2:1.3.174"
  gretty "mysql:mysql-connector-java:5.1.24"
}
