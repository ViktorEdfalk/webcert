description = 'Webcert (Web)'

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.moowork.node'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

grunt {
    colors = System.properties['gruntColors'] ?: true
}

node {
    version = '6.6.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = projectDir
    nodeModulesDir = projectDir
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    doFirst {
        args = ['test',
                "--outputDir=${webappTestOutputDir}",
                '--skip-coverage=' + !gradle.taskGraph.allTasks.any{it.name == 'sonarcube'}]
    }
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test {
    exclude '**/*IT*'
}

gretty {
    integrationTestTask = null
    contextPath = '/'
    httpPort = 9088
    scanInterval = 0

    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-web.xml")

    def minified = System.properties['webcert.useMinifiedJavaScript'] ?: false

    jvmArgs = [
        "-Dcatalina.base=${buildDir}/catalina.base",
        "-Dspring.profiles.active=dev",
        "-Dwebcert.resources.folder=${projectDir}/../src/main/resources",
        "-Dcredentials.file=${projectDir}/webcert-credentials.properties",
        "-Dwebcert.config.file=${projectDir}/webcert-dev.properties",
        "-Dwebcert.logback.file=${projectDir}/webcert-logback.xml",
        "-Dwebcert.useMinifiedJavaScript=${minified}",
        "-Dh2.tcp.port=9094",
        "-Dh2.web.port=9090",
        "-Djetty.port=9088"
        ]

    extraResourceBase webappOutputDir
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:9088/"
    include '**/*IT*'
}

war.dependsOn createVersionPropertyFile

// TODO: This is required to make the Schematron implementation pick up Saxon instead of Xalan.
// See if there is a less drastic solution.
configurations {
    runtime {
        exclude group: 'xalan', module: 'xalan'
    }
    buildtools
}

dependencies {
    buildtools "se.inera.intyg.common:common-build-tools:${commonVersion}"

    compile project(':fmb-integration')
    compile project(':pu-integration')
    compile project(':pp-integration')
    compile project(':notification-sender')
    compile project(':fk-stub')
    compile project(':notification-stub')
    compile project(':intygstjanst-stub')
    compile project(':mail-stub')

    compile "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
    compile 'se.funktionstjanster.grp:funktionstjanster-grp-schemas:1.0.3'
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:1.0.0.3"

    compile "se.inera.intyg.common:loggtjanst-stub:${commonVersion}"
    compile "se.inera.intyg.common:security-siths:${commonVersion}"

    compile "se.inera.intyg.intygstyper:ts-bas:${typerVersion}"
    compile "se.inera.intyg.intygstyper:ts-diabetes:${typerVersion}"
    compile "se.inera.intyg.intygstyper:fk-parent:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luse:${typerVersion}"
    compile "se.inera.intyg.intygstyper:lisu:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luae_na:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luae_fs:${typerVersion}"
    compile("se.inera.intyg.intygstyper:fk7263:${typerVersion}") {
        exclude(module: "insuranceprocess-healthreporting-schemas")
        exclude(module: "fk-vardgivare-sjukvard-schemas")
        exclude(module: "ServiceContracts_itintegration_monitoring")
    }

    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.apache.lucene:lucene-analyzers-common:4.10.2"

    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile 'org.springframework.security.extensions:spring-security-saml2-core:1.0.1.RELEASE'

    compile('org.opensaml:opensaml:2.5.3') {
        exclude(module: 'openws')
    }
    compile('org.opensaml:openws:1.4.2-1') {
        exclude(module: 'xmltooling')
    }
    compile('org.opensaml:xmltooling:1.3.2') {
        exclude(module: 'xml-apis')
    }
    compile('io.swagger:swagger-jaxrs:1.5.4') {
        exclude(module: 'jsr311-api')
    }

    compileOnly 'javax.servlet:servlet-api:2.5'
    compileOnly 'com.google.auto.value:auto-value:1.1'
    compileOnly 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile 'javax.servlet:javax.servlet-api:3.1.0'
    testCompile 'org.kubek2k:springockito:1.0.8'
    testCompile 'xmlunit:xmlunit:1.4'
    testCompile 'com.jayway.restassured:rest-assured:2.8.0'
    testCompile 'com.jayway.restassured:json-schema-validator:2.8.0'
    testCompile 'org.antlr:ST4:4.0.8'

    testRuntime "com.h2database:h2:${h2Version}"

    gretty "org.apache.activemq:activemq-client:${activeMqVersion}"
    gretty "org.apache.activemq:activemq-broker:${activeMqVersion}"
    gretty "com.h2database:h2:${h2Version}"
    gretty "mysql:mysql-connector-java:${mysqlVersion}"
}
