pipeline {

  // TODO: Nedanstående ska ge timestamps i console output men känns inte igen av Jenkins
  //options {
  //  timestamps ()
  //}

  environment {
    HOME = "${env.WORKSPACE}" // TODO: Behövs denna?
    UNDERKATALOG_TESTRAPPORTER = "test/cypress/results/"
    //TESTRAPPORTFILPATTERN = "test-results.*.xml"
    TESTRAPPORTFILPATTERN = "*.xml"

    // Provar Cypress dashboard. Denna nyckel bör bytas ut när nyckeln ligger
    // i Jenkins Credentials Store eftersom alla kan se denna nyckel, vilket i
    // sin tur betyder att vem som helst kan köra tester som laddas upp bland
    // de riktiga testerna.
    // Se https://jenkins.io/doc/book/using/using-credentials/
    // Nycklarna till dashboard hanteras här: https://dashboard.cypress.io/#/projects/1diiry/settings
    CYPRESS_RECORD_KEY = 'bc2e1db3-af72-4fad-9159-b78bf1989af1'
  }

  agent {
    // this image provides everything needed to run Cypress
    docker {
      image 'cypress/base:10'
      // image 'cypress/browsers:chrome69'  // Cypress kan inte spela in videos om man nyttjar Chrome

      label 'docker-slave'
    }
  }

  stages {

    stage('Verifiera förkrav') {
      steps {
        echo "Running build ${env.BUILD_ID} on ${env.JENKINS_URL}"
        sh 'npm --version'
        sh 'node --version'
      }
    }

    stage('Rensa gamla filer') {
      steps {
        // Testrapporter
        sh "rm -fr '${env.WORKSPACE}/${UNDERKATALOG_TESTRAPPORTER}/${TESTRAPPORTFILPATTERN}'"

        // Loggfiler från tidigare körningar
        sh "rm -fr '${env.WORKSPACE}/.npm/_logs/*.log'"
      }
    }

    stage('Installera Cypress') {
      steps {
        sh 'npm ci'
        sh 'npm run cy:verify:record'
      }
    }

    stage('Exekvera Cypresstester') {
      steps {
        sh "npm run test:e2e:electron"
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'test/cypress/videos/**/*.*', fingerprint: true

      // TODO: Använd variabler för att hämta JUnit-filer istället för hårdkodade pather
      //junit '${UNDERKATALOG_TESTRAPPORTER}/*.xml'
      sh "echo 'testresultatkatalogen holds these files: ' && ls test/cypress/results/"
      junit 'test/cypress/results/*.xml'
    }

    fixed {
      // Skicka epost om jobbet går bra igen
      emailext (
        subject: "Fixat! Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: "Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]' går nu BRA igen. Se konsollutmatning här: '${env.BUILD_URL}'",
        to: "johannes.larsson@nordicmedtest.se"
      )
    }

    failure {
      archiveArtifacts artifacts: 'test/cypress/screenshots/**/*.*', fingerprint: true
      archiveArtifacts artifacts: '.npm/_logs/*.log', fingerprint: true
    }

    // Denna sektion exekveras enbart om föregående körning gick bra och denna misslyckades
    regression {
      // Skicka epost om jobbet misslyckas
      emailext (
        subject: "Misslyckat! Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: "Jobb '${env.JOB_NAME} [${env.BUILD_NUMBER}]' MISSLYCKADES! Se konsollutmatning här: '${env.BUILD_URL}'. Inga fler mail kommer skickas innan jobbet åter går bra.",
        to: "johannes.larsson@nordicmedtest.se"
      )
    }
  }
}
